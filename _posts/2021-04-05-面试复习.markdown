[TOC]

## 系统

### 虚拟内存

### 进程

#### 1.常见的进程间通讯方式
- 管道
- 信号量
- 共享内存（最快，但是解决同步问题，一般用信号量或者互斥锁解决）
- 消息队列

#### 2.僵尸进程和孤儿进程
**孤儿进程**

> 一个父进程退出，而它的一个或多个子进程还在运行，那么这些子进程将会成为孤儿进程，由 `init` 进程对它们进行状态收集工作。

**僵尸进程**

> 一个进程通过 `fork` 创建子进程，子进程退出后，父进程没有调用 `wait` 或 `waitpid` 获取子进程状态，那么子进程的进程描述符会保留在系统中，这种进程称之为僵尸进程。


## 计算机网络

### TCP

#### TCP 和 UDP 有什么区别
- TCP 是面向连接的可靠传输协议，以字节流进行传输，受拥塞算法控制。
- UDP 是无连接的传输协议，以数据报为单位，不保证顺序。

#### UDP 如何实现可靠传输
  TCP 通过校验和、序号和确认应答、超时/差错重传以及其他优化措施（滑动窗口）实现。
  所以，UDP 可以通过一下方式实现可靠传输：
  1. 校验和，通过对数据部分进行哈希，然后将哈希算法类型和哈希结果在消息中发送给接收方。
  2. 序号和确认应答，加入消息序号保证顺序不会错乱，加入确认应答可以通知发送方哪些数据需要重传。
  3. 超时/差错重传，由于需要重传，所以发送方要把发送的数据放到缓存区，提高性能。
  4. 滑动窗口，除了控制发送速率，避免重复发送，以及接收方没有足够空间接受消息等问题。

#### 浏览器输入一个网址会发生什么，用到哪些协议
1. 域名解析，查找本地 hosts 文件是否有配置，没有就会去找 DNS 服务器解析。
2. 建立 TCP 连接。
3. 经由 IP 协议寻址和数据传输。
4. 发送 HTTP/HTTPS 请求。
5. 返回响应结果。
6. 关闭 TCP 连接。
7. 浏览器后续处理和渲染。

#### 四次挥手中，TIME-WAIT状态是在哪一步？

#### 三次握手过程第 **N** 条丢了会怎样？有什么现象？
1. 第一条 **SYN** 丢包：第一条客户端发出的 SYN 丢包的话，服务端根本感知不到该请求，所以主要由客户端处理，会有最多三次超时重传尝试。
2. 服务端收到 **SYN** 并回复的 **SYN,ACK** 包丢了：客户端会认为是第一条丢包了，所以客户端表现和第一条丢包流程一样。而对于服务端，此时处于 **SYN_RCVD** 状态，超时后未收到客户端发来的第三条 **SYN**，会进行数次重新发送 **SYN,ACK** 包（次数根据系统配置而异），重试超限后服务端会主动关闭这个连接。
3. 客户端最后一次回复 **SYN,ACK** 的 **ACK** 包丢了：客户端收到第二条后进入 `ESTABLISHED` 状态（认为连接已经建立），此时有两种情况，一是此时客户端开始发送数据，则服务端也会正常进入 `ESTABLISHED` 状态。另一种情况是，客户端此时没有发送数据，则服务端会超时重试，发送第二条 **SYN,ACK** 包，超限后关闭连接。

#### TIME-WAIT()状态下的等待时间是多少，为什么？
2MSL（Maximum Segment Lifetime）。该状态出现在主动关闭连接的一方发送完最后一次挥手，也就是 `ACK = 1` 的信号结束后，主动关闭连接方所处的状态。
这样设置的原因有两个：
1. 为了保证客户端发送的最后一个ack报文段能够到达服务器。
2. 在第四次挥手后，经过2msl的时间足以让本次连接产生的所有报文段都从网络中消失，这样下一次新的连接中就肯定不会出现旧连接的报文段了。

#### TCP流控制
TCP通过控制发送者发出的数据量来实现流控制，这一功能是通过滑动窗口机制来实现的。接受者的确认消息指明最后一次成功接收到报文段后可继续接收的报文段序号范围，这个可接收的序号范围称为窗口。
利用通知窗口进行流控制。

#### TCP 粘包、拆包，以及解决方案
TCP 之所以会出现粘包问题是因为它本身是面向连接的字节流传输协议，本身就没有包的概念，TCP 要发送的数据会被先放置在数据缓冲区，接收数据也是从缓冲区获取，而缓冲区的大小即为最大报文长度，如果需要发送的数据长度大于缓冲区剩余的大小或者大于最大报文长度，则会出现拆包，当要发送的数据很少，而短时间内又有其他数据包需要发送，就会出现粘包的现象。
解决方案一般有固定消息长度、设置标识符、在消息头指明消息长度。

### HTTP

#### HTTP 与 HTTPS 有啥区别？说下 HTTPS 解决了什么问题，怎么解决的？
HTTPS 是 HTTP 的安全版本，通过加入 SSL/TCL 传输层安全协议，解决了 HTTP 的会话信息明文传输导致的安全问题（消息拦截、消息篡改、消息伪造）。

#### 说下 HTTPS 的握手过程
1. 建立安全能力
2. 服务端鉴别与密钥交换
3. 客户端鉴别与密钥交换
4. 客户端发送完成消息，服务端发送完成消息，握手完成

## 数据库

## 其他
